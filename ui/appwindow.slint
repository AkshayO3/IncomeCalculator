import { Button, VerticalBox } from "std-widgets.slint";
import { LineEdit } from "std-widgets.slint";

export component AppWindow inherits Window {
    
    in property <string> results : "";
    in-out property <bool> openCurtain;

    callback divideIncome(string);
    background: #313E50;
 GridLayout {
    padding: 50px;
    spacing: 25px;
    Row{
         Text{
            text:"Enter Total income";

            horizontal-alignment: center;
            font-size: 24px;
            font-weight: 900;
         }
    }
    Row {
        income := LineEdit {                // Storing the value fetched in the variable income
            horizontal-alignment: center;
            font-size: 16px;
            placeholder-text: "Enter your number.";
            height: 35px;
        }
    }
    Row{
        Button {
            text: "Calculate";
            clicked => {
                root.openCurtain = !root.openCurtain;   // Toggle
                divideIncome(income.text)
            }
            primary: true;
            height: 35px;
        }
    }
    Row{
        VerticalBox {
            Rectangle {
                height: 100px;
                background: gold;
                    Text {
                        color:black;
                        font-size: 16px;
                        font-weight: 500;
                        text: root.results;
                    }  
                Rectangle {
                    background: wheat;
                    x:0;
                    height: parent.height;
                    width: openCurtain? 0px : parent.width/2;
                    animate width {
                         duration: 250ms;
                         easing: ease-in;
                    }
                }
                Rectangle{
                    background: wheat;
                    x:openCurtain? parent.width:parent.width/2;
                    height: parent.height;
                    width: openCurtain? 0px:parent.width/2;
                    animate width {
                         duration: 250ms;
                         easing: ease-in;
                    }
                    animate x {
                         duration: 250ms;
                         easing: ease-in;
                    }
                }
            }
        }
    }
    }
}
